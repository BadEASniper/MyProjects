package main;

import main.Controller.ImageFilter;
import main.ArrowKeysListenerFrame;
import main.GameGUI;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.image.BufferedImage;
import java.io.File;

public class MainMenu {
    private JFrame mainFrame = new JFrame("Sliding Puzzle");
    //    private ArrowKeysListenerFrame mainFrame;
    private JButton startTheGameButton;
    private JPanel mainPanel;
    private JPanel gamePanel;
    private JTextPane gameRules;
    private JButton openAPictureButton;
    private boolean userChoseToBrowseFile = false;
    private File image = null;
    private JTextField enterTheNumberOfTextField;
    private JButton startGameButton;

    public File getImage() {
        return image;
    }

    public JPanel getMainPanel() {
        return mainPanel;
    }

    public JFrame getMainFrame() {
        return mainFrame;
    }

    public MainMenu() {
        $$$setupUI$$$();
//        mainFrame = new ArrowKeysListenerFrame("Sliding Puzzle");
        createFileChooser();
        mainFrame.pack();
        mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        mainFrame.setSize(600, 600);

        mainFrame.setContentPane(mainPanel);
        mainFrame.setVisible(true);
        enterTheNumberOfTextField.addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent e) {
                enterTheNumberOfTextField.setText("");
            }
        });
    }



    public void startMainMenu() {
        mainPanel.setVisible(true);
        mainFrame.setContentPane(mainPanel);

    }

    public void createFileChooser() {
        openAPictureButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JFileChooser fileChooser = new JFileChooser();
                fileChooser.addChoosableFileFilter(new ImageFilter());
                fileChooser.setAcceptAllFileFilterUsed(false);

                int option = fileChooser.showOpenDialog(mainFrame);
                if (option == JFileChooser.APPROVE_OPTION) {
                   image = fileChooser.getSelectedFile();
                }
            }
        });
    }


    public void startGame() {
        try {
            int nrOfRows = Integer.parseInt(enterTheNumberOfTextField.getText().toString());
//            gGUI.setNumberOfRows(Integer.parseInt(enterTheNumberOfTextField.getText().toString()));
            GameGUI gGUI = new GameGUI(this, nrOfRows);
            gamePanel = gGUI.getGamePanel();
            mainFrame.setContentPane(gamePanel);
            gamePanel.setVisible(true);
        } catch (IllegalArgumentException e) {
            enterTheNumberOfTextField.setText("The number must be an integer!!!");
            startMainMenu();
        }
        gamePanel.setBackground(Color.BLACK);

    }


    public void createStartGameButton() {
        startGameButton = new JButton();
        startGameButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                mainPanel.setVisible(false);
                startGame();

            }
        });
    }

    private void createUIComponents() {

        createStartGameButton();

    }


    public static void main(String[] args) {
        MainMenu sPG = new MainMenu();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        mainPanel = new JPanel();
        mainPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 4, new Insets(0, 0, 0, 0), -1, -1));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        mainPanel.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 2, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        gameRules = new JTextPane();
        gameRules.setEditable(false);
        gameRules.setText("\n\n\n\n\n   Hello there! \n   This is a sliding puzzle, you can click on insert picture if you want your own personalised puzzle.\n   Please type in the number of rows/collumns (length of the square) you want to split the picture into.\n\n    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ Game Rules _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n\n\t\t1)  Click on a tile to swap it with the empty tile\n\t\t2)  You can only move tiles that are adjacent to the empty tile\n\t\t3)  Game finishes when all tiles are in order or the timer runs out\n\t\t4)  The 10 min timer starts after you click the button Shuffle tiles\n\n\t\tGood luck! :) ");
        mainPanel.add(gameRules, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 3, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        openAPictureButton = new JButton();
        openAPictureButton.setText("Open a picture");
        mainPanel.add(openAPictureButton, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        enterTheNumberOfTextField = new JTextField();
        enterTheNumberOfTextField.setText("Enter the number of rows here");
        mainPanel.add(enterTheNumberOfTextField, new com.intellij.uiDesigner.core.GridConstraints(1, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        startGameButton.setText("Start the game");
        mainPanel.add(startGameButton, new com.intellij.uiDesigner.core.GridConstraints(1, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
